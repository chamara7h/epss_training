---
title: "Demand Forecasting Models for Contraceptive Supply Chain"
author: "Bahman Rostami-Tabar"

format:
  html:
    toc: true
    number-sections: true
---

```{r}

# Define required packages
packages <- c("tidyverse", "fable", "tsibble", "feasts", 'zoo', "dygraphs", "tsbox")

# Install missing packages
missing_packages <- packages[!(packages %in% installed.packages()[,"Package"])]
if(length(missing_packages)) {
  suppressWarnings(suppressMessages(install.packages(missing_packages)))
}

# Load libraries quietly
suppressWarnings(suppressMessages({
  library(tidyverse) # Data manipulation and plotting functions
  library(fable) # Time series manipulation
  library(tsibble) # Forecasting functions
  library(feasts) # Time series graphics and statistics
  library(tsbox)
  library(dygraphs)
}))

```

# Prepare data for time series analysis and forecasting

## Import data

```{r}

# read data

med_qty <- read.csv('data/med_qty.csv')
med_qty |> head(10)

```


## Check explicit missing values (NA)

Which function do you use to see if there is any missing value?

```{r}
# check NAs

anyNA(med_qty)

```


## Check duplications and fix it

```{r}
#check duplicates

med_qty |>  
  duplicated() |>  
  sum() 

```

Have you found any duplicated values?

If there are duplicated values, how do you fix it? Witch functions in R would you recommend?

## Create tsibble

```{r}

med_tsb <- med_qty |>  
  mutate(date = yearmonth(date)) |>  # convert chr to date format
  as_tsibble(index = date, key = c(hub_id, product_id))

med_tsb 

```

* What is the temporal granularity of med_tsb?

    * Response:
    
* How many time series do we have in med_tsb?

    * Response:

## Check temporal gaps (implicit missing values)

```{r}

has_gaps(med_tsb) |> head(3) #check gaps

scan_gaps(med_tsb) |> head(3) # show gaps

count_gaps(med_tsb) |> head(3) # count gaps

```

## Check temporal gaps (implicit missing values)

If there is any gap, then we fill it. 

```{r}

med_tsb |> fill_gaps(quantity_issued=0L) # we can fill it with zero

```

## Check temporal gaps (implicit missing values)

*Note:* Since the main focus of this study is to provide foundational knowledge on forecasting, we will filter out time series with many missing values and then fill the remaining gaps using `na.interp()` function [(Read more)](https://search.r-project.org/CRAN/refmans/forecast/html/na.interp.html).

```{r}

item_ids <- med_tsb |> 
  count_gaps() |> 
  group_by(hub_id, product_id) |> 
  summarise(.n = max(.n), .groups = 'drop') |> 
  filter(.n  < 2) |> 
  mutate(id = paste0(hub_id,'-',product_id)) |> 
  pull(id) # filtering the item ids

med_tsb_filter <- med_tsb |> 
  mutate(id = paste0(hub_id,'-',product_id)) |> 
  group_by(hub_id, product_id) |>
  mutate(num_observations = n()) |> 
  filter(id %in% item_ids & num_observations >59) |>   # we have cold starts and discontinuations. 
  fill_gaps(quantity_issued = 1e-6, .full = TRUE) |>   # Replace NAs with a small value
  select(-id, -num_observations) |> 
  mutate(quantity_issued = if_else(is.na(quantity_issued), 
                                   exp(
                                     forecast::na.interp(
                                     ts(log(quantity_issued), frequency = 12))), 
                                   quantity_issued))

```

## Data wrangaling using `tsibble`

We can use the `filter()` function to select rows.

```{r}

med_tsb |> 
  filter(hub_id == 'hub_10') 

```

We can use the `select()` function to select columns.

```{r}

med_tsb |> 
  filter(hub_id == 'hub_10') |> 
  select(date, product_id, quantity_issued)

```

We can use `group_by()` function to group over keys. We can use the `summarise()` function to summarise over keys.

```{r}

med_tsb |> 
  group_by(product_id) |> 
  summarise(total_quantity_issued = sum(quantity_issued), .groups = 'drop')

```

We can use the `mutate()` function to create new variables.

```{r}

med_tsb |> 
  mutate(quarter = yearquarter(date))

```

We can use `index_by()` function to group over index We can use the `summarise()` function to summarise over index.

```{r}

med_tsb |> 
  mutate(quarter = yearquarter(date)) |> 
  index_by(quarter) |> 
  summarise(total_quantity_issues = sum(quantity_issued))

```

Let's now assume that we are interested in calculating the total quantiti issued in each hub for annualy. Can you write an R chunk to do that?

```{r}

med_tsb |>
  index_by(Year=year(date)) |>
  group_by(hub_id, product_id) |>
  summarise(Total_qty=sum(quantity_issued))

```

# Time series patterns/graphics

## time plot

You can create time plot using `autoplot()` function

```{r}

med_tsb_test <- med_tsb_filter |> 
  filter(hub_id == 'hub_1' & product_id == 'product_2') 

med_tsb_test |> 
  autoplot(quantity_issued) +
  labs(
    x = "Date",
    y = "Quantity Issued"
  ) +
  theme_minimal() +
  theme(panel.border = element_rect(color = "lightgrey", fill = NA))

```

You can use filter_index or head() and tail() to select a subset of time series , try ?filter_index or google it

```{r}

med_tsb_test |> filter_index("2019 Apr") |> autoplot(quantity_issued) + geom_point() # plot only April 2019

med_tsb_test |> filter_index("2019 Apr" ~ .) |> autoplot(quantity_issued) # plot from April 2019 till the end

med_tsb_test |> filter_index(. ~ "2019 Apr") |> autoplot(quantity_issued)# plot from begin to the April 2019

med_tsb_test |> filter_index("2019 Apr" ~ "2021 Oct") |> autoplot(quantity_issued)

med_tsb_test |> head(n = 20) |> autoplot() # first 20 observations

med_tsb_test |> tail(n = 20) |> autoplot()  # last 20 observations

```
It could be really hard to visualize hourly or daily data, one possibility is to view a portion of the data, you can also use  interactive plots. 

Here we show how to do it with monthly data, but you do the same for any time interval like hourly or daily:

```{r}

ts_xts(med_tsb_filter) |> 
  dygraph() 

```

Let's create the monthly time series for each hub and then plot it using this interactive graphic

```{r}

med_tsb_filter |> 
  group_by(hub_id) |> 
  summarise(quantity_issued = sum(quantity_issued)) |> 
  ts_xts() |> 
  dygraph() 

```

## Seasonal plots

use seasonal and subseries plots to check whether series contain seasonality if you are interested in monthly quantity_issued for each purpose:

```{r}

med_tsb_filter |> 
  filter(hub_id == 'hub_14' & product_id == 'product_5') |> 
  gg_season(quantity_issued, labels = "both") +
  ylab("Quantity issued") +
  ggtitle("Seasonal plot") +
  theme_minimal() +
  theme(panel.border = element_rect(color = "lightgrey", fill = NA))

```

Can you repeat above with subseries plot:

```{r }

med_tsb_filter |> 
  filter(hub_id == 'hub_14' & product_id == 'product_5') |> 
  gg_subseries(quantity_issued) +
  ylab("Quantity issued") +
  ggtitle("Seasonal sub series plot") +
  theme_minimal() +
  theme(axis.text.x = element_text(angle = 90, hjust = 1),
        panel.border = element_rect(color = "lightgrey", fill = NA))

```


If you work with hourly and daily series, you can change the "period= ..." argument to see different types of seasonality (multiple seasonality)

## autocorrelation plot

Let's see if there is any autocorrelation for  monthly quantity_issued:

```{r}

med_tsb_filter |> 
  filter(hub_id == 'hub_14' & product_id == 'product_5') |>
  gg_lag(quantity_issued, lags = 1:12, geom='point') +
  ylab("Quantity issued") +
  xlab("Lag (Quantity issued, n)") +
  theme_minimal() +
  theme(axis.text.x = element_text(angle = 90, hjust = 1),
         panel.border = element_rect(color = "lightgrey", fill = NA))

```

now, let's compute the autocorrelation function 

```{r }

med_tsb_filter |> 
  filter(hub_id == 'hub_14' & product_id == 'product_5') |> 
  ACF(quantity_issued, lag_max = 24)

```

plot the autocorrelation 

```{r}

tourism_acf |> autoplot()

```

You can have a time plot, acf and season plot in one single plot if you use `gg_tsdisplay()` function

```{r }

med_tsb_filter |> 
  filter(hub_id == 'hub_14' & product_id == 'product_5') |> 
  ACF(quantity_issued, lag_max = 36) |> 
  autoplot() +
  theme_minimal() +
  theme(panel.border = element_rect(color = "lightgrey", fill = NA))

```

You can use ljung box to test whether ACF is significant, if p-value is small, << 0.05 then there is a significant autocorrelation:

```{r}

med_tsb_filter |> 
  filter(hub_id == 'hub_14' & product_id == 'product_5') |> 
  features(quantity_issued, ljung_box)

```

What autocorrelation will tell us? Which key features could be highlighted by ACF?

## Time series features

For the `med_tsb_filter`, the monthly time series with keys , extract the strength of trend and seasonality

  *Do you see any useful insight?*

```{r }

med_tsb_filter |> 
  features(quantity_issued, feat_stl)

```


now, let's plot the strength of trend versus strength of seasonality for all time series:

```{r}

med_tsb_filter |> 
  features(quantity_issued, feat_stl) |> 
  ggplot(aes(x = trend_strength, y = seasonal_strength_year, shape = product_id)) +
  geom_point(size = 2) + 
  ylab("Seasonal strength") +
  xlab("Trend strength") +
  theme_minimal() +
  theme(panel.border = element_rect(color = "lightgrey", fill = NA))

```

Discuss any insight you can get form this plot. 

# Specify and train models

We specify models using the function corresponding to the name of the forecasting model. We use a formula (response \~ terms) to specify methods and estimate parameters using `model()` function. If there is no term for the method (e.g. `MEAN(quantity_issued)`), we ignore the `~` and terms:

Now, run the following R chunk:

```{r}

fit_all <- med_tsb_filter |> 
  filter(hub_id == 'hub_1' & product_id == 'product_5') |>
  model(
    naive = NAIVE(quantity_issued),
    snaive = SNAIVE(quantity_issued ~ lag('year')),
    mean = MEAN(quantity_issued ~ window(size = 3)),
    arima = ARIMA(quantity_issued),
    ets = ETS(quantity_issued)
    )

fit_all

```

You can observe `fit_all` object by selecting it and run.

`fit_all` is called `mable`, it is model table, each row belongs to one time series and each column to a model

Now we can extract information or look into details of the trained models(mable) using `tidy()`, `report()`, `glance()` and `augment()`

These function would reveal more information when used with models with parameters such as exponential smoothing (ETS), but here you can try them with simple methods and use them with other models in the next tutorials:

```{r}

fit_all |>  tidy() 
fit_all |>  glance() 
fit_all |>  select(mean) |> report() 
fit_all |>  select(ets) |> tidy()  
fit_all |>  augment()

```

You can extract fitted values and residuals for each model using `augment()` . You can then use filter() to extract information for any model and select `.fitted` or `.resid`

```{r}

fit_all |> augment()

fit_all |> augment() |> filter(.model=="naive") |> select(.fitted) |> view()  # select fitted values
 
fit_all |> augment() |> filter(.model=="snaive") |> select(.fitted) |> view() # select fitted values
 
fit_all |> augment() |> filter(.model=="naive") |> select(.resid) |> view()   # select residuals

```

You can extract fitted values or residuals and then visualise them. Let's now extract fitted values and visualise:

```{r}

fit <-  fit_all |> augment() |> 
  filter(.model=="snaive")

fit2 <-  fit_all |> augment() |> 
  filter(.model=="naive")

fit |> autoplot(quantity_issued) +
autolayer(fit,.fitted, color="red", lty=4)

fit2 |> autoplot(quantity_issued) +
autolayer(fit2,.fitted, color="blue", lty=4)+
  autolayer(fit,.fitted, color="red", lty=4)

fit_all |> 
  augment() |> 
  autoplot(quantity_issued) +
  autolayer(fit_all |> 
              augment(), .fitted, lty=6)

```
In order to produce forecasts, we pass `fit_all`, the mable object, to the `forecast()` function:

```{r }

fit_all_fc <- fit_all |> 
  forecast(h = 'year')

#h = "year" is equivalent to setting h = 12.

fit_all_fc

```

Forecast function needs the forecast horizon as argument, h="year" or h=12

We can also plot generated forecasts using models, if you don't want to plot prediction intervals, then use `level=NULL`

```{r}

fit_all_fc |> 
  autoplot(level = NULL) +
  autolayer(med_tsb_filter |> 
              filter_index("2022 JAn" ~ .) |> 
              filter(hub_id == 'hub_1' & product_id == 'product_5'), color = 'black') +
  labs(title = "Forecasts for monthly quantity issued", y = "Quantity issued", x = "Date") +
  theme_minimal() +
  theme(panel.border = element_rect(color = "lightgrey", fill = NA)) +
  guides(colour=guide_legend(title="Forecast"))


fit_all_fc |> 
  filter(.model == 'snaive') |> 
  autoplot(level = 95) +
  autolayer(med_tsb_filter |> 
              filter_index("2022 JAn" ~ .) |> 
              filter(hub_id == 'hub_1' & product_id == 'product_5'), color = 'black') +
  labs(title = "Forecasts for monthly quantity issued", y = "Quantity issued", x = "Date") +
  theme_minimal() +
  theme(panel.border = element_rect(color = "lightgrey", fill = NA)) +
  guides(colour=guide_legend(title="Forecast"))


fit_all_fc |> 
  filter(.model == 'snaive') |> 
  autoplot() +
  autolayer(med_tsb_filter |> 
              filter_index("2022 JAn" ~ .) |> 
              filter(hub_id == 'hub_1' & product_id == 'product_5'), color = 'black') +
  labs(title = "Forecasts for monthly quantity issued", y = "Quantity issued", x = "Date") +
  theme_minimal() +
  theme(panel.border = element_rect(color = "lightgrey", fill = NA)) +
  guides(colour=guide_legend(title="Forecast"))

```
## Generate different futures forecast

```{r}

med_tsb_filter |> 
  filter(hub_id == 'hub_1' & product_id == 'product_5') |>
  model(snaive = SNAIVE(quantity_issued ~ lag("year"))) |> 
  generate(h = 12, bootstrap = TRUE, times = 5)

```

```{r}

sim <- med_tsb_filter |> 
  filter(hub_id == 'hub_1' & product_id == 'product_5') |>
  model(snaive = SNAIVE(quantity_issued ~ lag("year"))) |> 
  generate(h = 12, bootstrap = TRUE, times = 5)

med_tsb_filter |> 
  filter_index('2022 Jan' ~ .) |> 
  filter(hub_id == 'hub_1' & product_id == 'product_5') |>
  ggplot(aes(x = date)) +
  geom_line(aes(y = quantity_issued)) +
  geom_line(aes(y = .sim, colour = as.factor(.rep)),
    data = sim)+
  labs(y = "Quantity issued", x = "Date", colour="Future") +
  theme_minimal() +
  theme(panel.border = element_rect(color = "lightgrey", fill = NA))

```

## Generate probabilistic forecast

```{r}

med_tsb_filter |> 
  filter(hub_id == 'hub_1' & product_id == 'product_5') |>
  model(snaive = SNAIVE(quantity_issued ~ lag("year"))) |> 
  forecast(h = 12, bootstrap = TRUE, times = 1000)

```

## Prediction intervals

Forecast intervals can be extracted using the `hilo()` function.

```{r}

med_tsb_filter |> 
  filter(hub_id == 'hub_1' & product_id == 'product_5') |>
  model(snaive = SNAIVE(quantity_issued ~ lag("year"))) |> 
  forecast(h = 12, bootstrap = TRUE, times = 1000) |> 
  hilo(level = 75) |> 
  unpack_hilo("75%")

```

# Evaluate model performance

1. We initially split the data into test and train.

```{r}

train <- med_tsb_filter |> # create train set
  filter_index(. ~ '2022 June')

```

2. Train models for each time series (for each value of `.id` variable)


```{r}

fit_all <- train |> # model fitting
  model(
    naive = NAIVE(quantity_issued),
    snaive = SNAIVE(quantity_issued ~ lag('year')),
    mean = MEAN(quantity_issued ~ window(size = 3)),
    arima = ARIMA(quantity_issued),
    ets = ETS(quantity_issued)
    )

```


You can observe `fit_all` by selecting (just double click on it) and running it, this is our model table (mable). We get one column for each forecasting model that is applied to each time series (rows). inside each cell(e.g.\<S3: lst_mdl\>) we have the fitted(trained) model with its components and parameters.

You can also use the functions introduced above to investigate fitted models to each .id:

```{r}

fit_all |> tidy()
fit_all |>  glance() 
fit_all |> select(naive)  |>  augment()

```

3. Forecast for each series

Now, we want to produce forecast for 12 months ahead.

```{r}

f_horizon <- 12 # forecast horizon

fit_all_fc <- fit_all |> # forecasting
  forecast(h = f_horizon)

```

This will create a forecast table or `fable` object. Observe it and look at the columns. What is `quantity_issued` and `.mean` in fit_all_fc?

in `fit_all_fc` (a fable object) each .id is representing the forecast for each series.

## Evaluate the overall point forecast accuracy

You calculate the point forecast accuracy using `accuracy()` function. `accuracy()` needs both the forecast object(fable) and actual data.

```{r}
#only point forecast

fit_all_fc |> 
  accuracy(med_tsb_filter)

```

## Evaluate the overall prediction interval forecast accuracy

You can specify which accuracy measure you want using `measures = list()`

```{r}
#only interval forecast
 fit_all_fc |>
  accuracy(med_tsb_filter,
           measures = list(interval_accuracy_measures))
```

## Evaluate the overall forecast distribution accuracy

```{r}

#only distributional

fit_all_fc |> 
  accuracy(med_tsb_filter,
           measures = list(distribution_accuracy_measures)) 

```


## Evaluate the overall forecast accuracy for all measures at once

```{r}
#all measures
fit_all_fc |> 
  accuracy(med_tsb_filter,
           measures = list(point_accuracy_measures,
                           interval_accuracy_measures,
                           distribution_accuracy_measures
)) 

```

```{r}
#all measures
fit_all_fc |> 
  accuracy(med_tsb_filter,
           measures = list(point_accuracy_measures,
                           interval_accuracy_measures,
                           distribution_accuracy_measures)) |> 
  group_by(.model) |> 
  select(MASE, RMSE, pinball, CRPS) |> 
  summarise(across(where(is.double), mean, na.rm = TRUE))
  
```







